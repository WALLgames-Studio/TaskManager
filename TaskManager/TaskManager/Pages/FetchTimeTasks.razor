@page "/fetchTimeTasks"

<PageTitle>Weather forecast</PageTitle>

@using TaskManager.Data
@using TaskManager.Data.Models
@using TaskManager.Data.Services
@using System.Timers
@inject TimeTaskService _service
@inject NavigationManager Navigator


@if (_tasks == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <ul class="TimeTask">
        @foreach (TimeTask task in _tasks)
        {
            <li class="content">
                <a href="#" @onclick="() => SelectTimeTask(task.Id)"><div class="round">@task.CurrentTime</div></a>
            </li>
        }

        <li class="newTime" align="center">
            <a href="#"><div class="round"><img src="..\Shared\img\newList.png" alt="+" align="center"></div></a>
        </li>
    </ul>         
    @counter
}

@code {
    private int counter = 0;
    private BaseTask[]? _tasks;
    private Timer? _renderTimer = new Timer();
    private JSRuntime _jsRuntime ;

    protected override async Task OnInitializedAsync()
    {
        _tasks = _service.GetTasksAsync().Result.ToArray();

        _renderTimer.Interval = 1000;
        _renderTimer.Enabled = true;
        _renderTimer.Elapsed += (sender, e) =>
        {
            counter++;
            _tasks = _service.GetTasksAsync().Result.ToArray();
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
    }

    protected void SelectTimeTask(Guid id)
    {
        _service.SelectedTask =  _service.GetTaskAsync(id).Result as TimeTask;
        
    }



}